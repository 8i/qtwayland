import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtWayland.Compositor 1.0'

Module {
    Component {
        name: "QWaylandClient"
        prototype: "QObject"
        exports: ["QtWayland.Compositor/WaylandClient 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "userId"; type: "qlonglong"; isReadonly: true }
        Property { name: "groupId"; type: "qlonglong"; isReadonly: true }
        Property { name: "processId"; type: "qlonglong"; isReadonly: true }
        Method { name: "close" }
        Method {
            name: "kill"
            Parameter { name: "sig"; type: "int" }
        }
        Method { name: "kill" }
    }
    Component {
        name: "QWaylandCompositor"
        prototype: "QObject"
        Property { name: "socketName"; type: "QByteArray" }
        Property { name: "extensionFlags"; type: "QWaylandCompositor::ExtensionFlags" }
        Property { name: "retainedSelection"; type: "bool" }
        Property { name: "primaryOutput"; type: "QWaylandOutput"; isPointer: true }
        Signal {
            name: "surfaceCreated"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "surfaceAboutToBeDestroyed"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method { name: "addDefaultShell" }
        Method {
            name: "destroyClientForSurface"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "destroyClient"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
        Method { name: "outputs"; type: "QList<QWaylandOutput*>" }
        Method {
            name: "output"
            type: "QWaylandOutput*"
            Parameter { name: "outputWindow"; type: "QWindow"; isPointer: true }
        }
        Method {
            name: "addOutput"
            type: "QWaylandOutput*"
            Parameter { name: "outputWindow"; type: "QWindow"; isPointer: true }
        }
        Method {
            name: "pickView"
            type: "QWaylandSurfaceView*"
            Parameter { name: "globalPosition"; type: "QPointF" }
        }
        Method {
            name: "mapToView"
            type: "QPointF"
            Parameter { name: "view"; type: "QWaylandSurfaceView"; isPointer: true }
            Parameter { name: "surfacePosition"; type: "QPointF" }
        }
    }
    Component {
        name: "QWaylandOutput"
        prototype: "QObject"
        exports: ["QtWayland.Compositor/WaylandOutput 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "compositor"; type: "QWaylandCompositor"; isReadonly: true; isPointer: true }
        Property { name: "window"; type: "QWindow"; isReadonly: true; isPointer: true }
        Property { name: "geometry"; type: "QRect" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "physicalWidth"; type: "int" }
        Property { name: "physicalHeight"; type: "int" }
        Property { name: "refreshRate"; type: "int" }
    }
    Component {
        name: "QWaylandQuickCompositor"
        prototype: "QWaylandCompositor"
        Property { name: "initializeLegazyQmlNames"; type: "bool" }
    }
    Component {
        name: "QWaylandQuickCompositorImpl"
        prototype: "QWaylandQuickCompositor"
        exports: ["QtWayland.Compositor/WaylandCompositor 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QWaylandQuickSurface"
        prototype: "QWaylandSurface"
        exports: ["QtWayland.Compositor/WaylandQuickSurface 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "useTextureAlpha"; type: "bool" }
        Property { name: "clientRenderingEnabled"; type: "bool" }
        Property { name: "windowProperties"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "shellView"; type: "QWaylandSurfaceItem"; isReadonly: true; isPointer: true }
        Signal { name: "shellViewCreated" }
    }
    Component {
        name: "QWaylandSurface"
        prototype: "QObject"
        Enum {
            name: "WindowFlag"
            values: {
                "OverridesSystemGestures": 1,
                "StaysOnTop": 2,
                "BypassWindowManager": 4
            }
        }
        Enum {
            name: "WindowFlags"
            values: {
                "OverridesSystemGestures": 1,
                "StaysOnTop": 2,
                "BypassWindowManager": 4
            }
        }
        Enum {
            name: "WindowType"
            values: {
                "None": 0,
                "Toplevel": 1,
                "Transient": 2,
                "Popup": 3
            }
        }
        Property { name: "client"; type: "QWaylandClient"; isReadonly: true; isPointer: true }
        Property { name: "size"; type: "QSize"; isReadonly: true }
        Property { name: "windowFlags"; type: "QWaylandSurface::WindowFlags"; isReadonly: true }
        Property { name: "windowType"; type: "QWaylandSurface::WindowType"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "className"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "orientationUpdateMask"; type: "Qt::ScreenOrientations"; isReadonly: true }
        Property { name: "visibility"; type: "QWindow::Visibility" }
        Property { name: "transientParent"; type: "QWaylandSurface"; isReadonly: true; isPointer: true }
        Property { name: "transientOffset"; type: "QPointF"; isReadonly: true }
        Property { name: "output"; type: "QWaylandOutput"; isReadonly: true; isPointer: true }
        Signal { name: "mapped" }
        Signal { name: "unmapped" }
        Signal {
            name: "damaged"
            Parameter { name: "rect"; type: "QRegion" }
        }
        Signal {
            name: "parentChanged"
            Parameter { name: "newParent"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldParent"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "windowPropertyChanged"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "windowFlagsChanged"
            Parameter { name: "flags"; type: "WindowFlags" }
        }
        Signal {
            name: "windowTypeChanged"
            Parameter { name: "type"; type: "WindowType" }
        }
        Signal { name: "extendedSurfaceReady" }
        Signal { name: "raiseRequested" }
        Signal { name: "lowerRequested" }
        Signal { name: "pong" }
        Signal { name: "surfaceDestroyed" }
        Signal { name: "shellViewCreated" }
        Signal {
            name: "outputChanged"
            Parameter { name: "newOutput"; type: "QWaylandOutput"; isPointer: true }
            Parameter { name: "oldOutput"; type: "QWaylandOutput"; isPointer: true }
        }
        Signal {
            name: "configure"
            Parameter { name: "hasBuffer"; type: "bool" }
        }
        Signal { name: "redraw" }
        Method { name: "updateSelection" }
        Method {
            name: "requestSize"
            Parameter { name: "size"; type: "QSize" }
        }
        Method {
            name: "sendOnScreenVisibilityChange"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "destroy" }
        Method { name: "destroySurface" }
        Method { name: "ping" }
    }
    Component {
        name: "QWaylandSurfaceItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtWayland.Compositor/WaylandSurfaceItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "surface"; type: "QWaylandSurface"; isReadonly: true; isPointer: true }
        Property { name: "paintEnabled"; type: "bool" }
        Property { name: "touchEventsEnabled"; type: "bool" }
        Property { name: "isYInverted"; type: "bool"; isReadonly: true }
        Property { name: "resizeSurfaceToItem"; type: "bool" }
        Signal { name: "yInvertedChanged" }
        Signal { name: "surfaceDestroyed" }
        Method {
            name: "takeFocus"
            Parameter { name: "device"; type: "QWaylandInputDevice"; isPointer: true }
        }
        Method { name: "takeFocus" }
        Method {
            name: "setPaintEnabled"
            Parameter { name: "paintEnabled"; type: "bool" }
        }
        Method { name: "isYInverted"; type: "bool" }
    }
}
